// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Open AI and AI Model gpt-4o-2024-05-13
ROOST_METHOD_HASH=getAge_f5c0c77907
ROOST_METHOD_SIG_HASH=getAge_4fc4faa7b8
```
Scenario 1: Verify Age Retrieval When Age is Set
Details:
  TestName: getAgeWhenAgeIsSet
  Description: This test checks if the getAge method returns the correct age value when the age field is set.
Execution:
  Arrange: Create an instance of the class containing the getAge method and set the age field to a specific value.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify that the returned age matches the set value.
Validation:
  Verify that the getAge method correctly returns the age field's value, ensuring the method works as expected when the age is set. This test confirms the basic functionality of the getAge method.
Scenario 2: Verify Age Retrieval for Default Age Value
Details:
  TestName: getAgeWhenAgeIsDefault
  Description: This test checks the behavior of the getAge method when the age field is not explicitly set (default value).
Execution:
  Arrange: Create an instance of the class containing the getAge method without modifying the age field.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify that the returned age matches the default value (typically 0).
Validation:
  Ensure the getAge method correctly returns the default age value when the age field is not explicitly set, verifying the method's behavior in default conditions.
Scenario 3: Verify Age Retrieval for Boundary Value (Minimum Age)
Details:
  TestName: getAgeWhenAgeIsMinimum
  Description: This test checks the getAge method's behavior when the age field is set to the minimum possible value (e.g., 0 or a defined lower boundary).
Execution:
  Arrange: Create an instance of the class containing the getAge method and set the age field to the minimum possible value.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify that the returned age matches the minimum value.
Validation:
  Confirm that the getAge method correctly handles and returns the minimum age value, ensuring robustness in boundary conditions.
Scenario 4: Verify Age Retrieval for Boundary Value (Maximum Age)
Details:
  TestName: getAgeWhenAgeIsMaximum
  Description: This test checks the getAge method's behavior when the age field is set to the maximum possible value (e.g., Integer.MAX_VALUE).
Execution:
  Arrange: Create an instance of the class containing the getAge method and set the age field to the maximum possible value.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify that the returned age matches the maximum value.
Validation:
  Ensure that the getAge method correctly handles and returns the maximum age value, verifying the method's robustness in handling upper boundary conditions.
Scenario 5: Verify Age Retrieval After Multiple Updates
Details:
  TestName: getAgeAfterMultipleUpdates
  Description: This test checks the getAge method's accuracy after the age field is updated multiple times.
Execution:
  Arrange: Create an instance of the class containing the getAge method and update the age field multiple times with different values.
  Act: Invoke the getAge method after each update.
  Assert: Use JUnit assertions to verify that the returned age matches the latest set value.
Validation:
  Confirm that the getAge method correctly reflects the latest age value after multiple updates, ensuring the method's consistency and reliability.
Scenario 6: Verify Age Retrieval with Mocking Dependencies (Logger)
Details:
  TestName: getAgeWithMockingLogger
  Description: This test examines if the getAge method's functionality is influenced by the presence of the logger dependency.
Execution:
  Arrange: Create an instance of the class containing the getAge method and mock the logger dependency.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify the returned age and check if the logger interactions are as expected.
Validation:
  Ensure that the getAge method's functionality is independent of the logger dependency, verifying that logging does not interfere with the age retrieval process.
Scenario 7: Verify Age Retrieval with Null Dependencies (Broker)
Details:
  TestName: getAgeWithNullBroker
  Description: This test checks the getAge method's behavior when the broker dependency is null.
Execution:
  Arrange: Create an instance of the class containing the getAge method with the broker field set to null.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify the returned age.
Validation:
  Confirm that the getAge method correctly returns the age value even when the broker dependency is null, ensuring the method's robustness in handling null dependencies.
Scenario 8: Verify Age Retrieval with Null Dependencies (Begin and End Dates)
Details:
  TestName: getAgeWithNullBeginAndEndDates
  Description: This test examines the getAge method's behavior when the begin and end date fields are null.
Execution:
  Arrange: Create an instance of the class containing the getAge method with the begin and end date fields set to null.
  Act: Invoke the getAge method.
  Assert: Use JUnit assertions to verify the returned age.
Validation:
  Ensure that the getAge method correctly returns the age value even when the begin and end date fields are null, verifying the method's robustness in handling null date dependencies.
```
These scenarios cover various edge cases and typical usage patterns for the `getAge` method, ensuring comprehensive testing of its functionality.
*/
// ********RoostGPT********
package pt.ulisboa.tecnico.softeng.broker.domain;

import org.joda.time.LocalDate;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pt.ulisboa.tecnico.softeng.broker.interfaces.ActivityInterface;
import pt.ulisboa.tecnico.softeng.broker.interfaces.BankInterface;
import pt.ulisboa.tecnico.softeng.broker.interfaces.HotelInterface;
import pt.ulisboa.tecnico.softeng.hotel.domain.Room;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;
import org.junit.experimental.categories.Category;

@Category({ Categories.getAge.class, Categories.roostTest1.class, Categories.roostTest2.class })
@RunWith(MockitoJUnitRunner.class)
public class AdventureGetAgeTest {

	@Mock
	private Broker broker;

	@InjectMocks
	private Adventure adventure;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void getAgeWhenAgeIsSet() {
		Adventure adventure = new Adventure(broker, new LocalDate(), new LocalDate().plusDays(10), 25, "IBAN", 1000);
		assertEquals(25, adventure.getAge());
	}

	@Test
	public void getAgeWhenAgeIsDefault() {
		Adventure adventure = new Adventure(broker, new LocalDate(), new LocalDate().plusDays(10), 0, "IBAN", 1000);
		assertEquals(0, adventure.getAge());
	}

	@Test
	public void getAgeWhenAgeIsMinimum() {
		Adventure adventure = new Adventure(broker, new LocalDate(), new LocalDate().plusDays(10), 0, "IBAN", 1000);
		assertEquals(0, adventure.getAge());
	}

	@Test
	public void getAgeWhenAgeIsMaximum() {
		Adventure adventure = new Adventure(broker, new LocalDate(), new LocalDate().plusDays(10), Integer.MAX_VALUE,
				"IBAN", 1000);
		assertEquals(Integer.MAX_VALUE, adventure.getAge());
	}

	@Test
	public void getAgeAfterMultipleUpdates() {
		Adventure adventure = new Adventure(broker, new LocalDate(), new LocalDate().plusDays(10), 20, "IBAN", 1000);
		adventure = new Adventure(broker, new LocalDate(), new LocalDate().plusDays(10), 30, "IBAN", 1000);
		assertEquals(30, adventure.getAge());
	}

	@Test
	public void getAgeWithMockingLogger() {
		// Comment: Cannot access private static logger in Adventure class.
		// Suggestion: Business logic should allow logger to be configurable or test
		// should not verify logger directly.
	}

	@Test
	public void getAgeWithNullBroker() {
		Adventure adventure = new Adventure(null, new LocalDate(), new LocalDate().plusDays(10), 50, "IBAN", 1000);
		assertEquals(50, adventure.getAge());
	}

	@Test
	public void getAgeWithNullBeginAndEndDates() {
		Adventure adventure = new Adventure(broker, null, null, 60, "IBAN", 1000);
		assertEquals(60, adventure.getAge());
	}

}